package com.stratagile.qlink.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TRANSACTION_RECORD".
*/
public class TransactionRecordDao extends AbstractDao<TransactionRecord, Long> {

    public static final String TABLENAME = "TRANSACTION_RECORD";

    /**
     * Properties of entity TransactionRecord.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property TransactiomType = new Property(1, int.class, "transactiomType", false, "TRANSACTIOM_TYPE");
        public final static Property IsReported = new Property(2, boolean.class, "isReported", false, "IS_REPORTED");
        public final static Property ConnectType = new Property(3, int.class, "connectType", false, "CONNECT_TYPE");
        public final static Property Txid = new Property(4, String.class, "txid", false, "TXID");
        public final static Property NeoCount = new Property(5, double.class, "neoCount", false, "NEO_COUNT");
        public final static Property QlcCount = new Property(6, double.class, "qlcCount", false, "QLC_COUNT");
        public final static Property Timestamp = new Property(7, long.class, "timestamp", false, "TIMESTAMP");
        public final static Property ExChangeId = new Property(8, String.class, "exChangeId", false, "EX_CHANGE_ID");
        public final static Property FriendNum = new Property(9, String.class, "friendNum", false, "FRIEND_NUM");
        public final static Property AssetName = new Property(10, String.class, "assetName", false, "ASSET_NAME");
        public final static Property IsMainNet = new Property(11, boolean.class, "isMainNet", false, "IS_MAIN_NET");
        public final static Property ToP2pId = new Property(12, String.class, "toP2pId", false, "TO_P2P_ID");
    }


    public TransactionRecordDao(DaoConfig config) {
        super(config);
    }
    
    public TransactionRecordDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TRANSACTION_RECORD\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: id
                "\"TRANSACTIOM_TYPE\" INTEGER NOT NULL ," + // 1: transactiomType
                "\"IS_REPORTED\" INTEGER NOT NULL ," + // 2: isReported
                "\"CONNECT_TYPE\" INTEGER NOT NULL ," + // 3: connectType
                "\"TXID\" TEXT," + // 4: txid
                "\"NEO_COUNT\" REAL NOT NULL ," + // 5: neoCount
                "\"QLC_COUNT\" REAL NOT NULL ," + // 6: qlcCount
                "\"TIMESTAMP\" INTEGER NOT NULL ," + // 7: timestamp
                "\"EX_CHANGE_ID\" TEXT," + // 8: exChangeId
                "\"FRIEND_NUM\" TEXT," + // 9: friendNum
                "\"ASSET_NAME\" TEXT," + // 10: assetName
                "\"IS_MAIN_NET\" INTEGER NOT NULL ," + // 11: isMainNet
                "\"TO_P2P_ID\" TEXT);"); // 12: toP2pId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TRANSACTION_RECORD\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, TransactionRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTransactiomType());
        stmt.bindLong(3, entity.getIsReported() ? 1L: 0L);
        stmt.bindLong(4, entity.getConnectType());
 
        String txid = entity.getTxid();
        if (txid != null) {
            stmt.bindString(5, txid);
        }
        stmt.bindDouble(6, entity.getNeoCount());
        stmt.bindDouble(7, entity.getQlcCount());
        stmt.bindLong(8, entity.getTimestamp());
 
        String exChangeId = entity.getExChangeId();
        if (exChangeId != null) {
            stmt.bindString(9, exChangeId);
        }
 
        String friendNum = entity.getFriendNum();
        if (friendNum != null) {
            stmt.bindString(10, friendNum);
        }
 
        String assetName = entity.getAssetName();
        if (assetName != null) {
            stmt.bindString(11, assetName);
        }
        stmt.bindLong(12, entity.getIsMainNet() ? 1L: 0L);
 
        String toP2pId = entity.getToP2pId();
        if (toP2pId != null) {
            stmt.bindString(13, toP2pId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, TransactionRecord entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
        stmt.bindLong(2, entity.getTransactiomType());
        stmt.bindLong(3, entity.getIsReported() ? 1L: 0L);
        stmt.bindLong(4, entity.getConnectType());
 
        String txid = entity.getTxid();
        if (txid != null) {
            stmt.bindString(5, txid);
        }
        stmt.bindDouble(6, entity.getNeoCount());
        stmt.bindDouble(7, entity.getQlcCount());
        stmt.bindLong(8, entity.getTimestamp());
 
        String exChangeId = entity.getExChangeId();
        if (exChangeId != null) {
            stmt.bindString(9, exChangeId);
        }
 
        String friendNum = entity.getFriendNum();
        if (friendNum != null) {
            stmt.bindString(10, friendNum);
        }
 
        String assetName = entity.getAssetName();
        if (assetName != null) {
            stmt.bindString(11, assetName);
        }
        stmt.bindLong(12, entity.getIsMainNet() ? 1L: 0L);
 
        String toP2pId = entity.getToP2pId();
        if (toP2pId != null) {
            stmt.bindString(13, toP2pId);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public TransactionRecord readEntity(Cursor cursor, int offset) {
        TransactionRecord entity = new TransactionRecord( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.getInt(offset + 1), // transactiomType
            cursor.getShort(offset + 2) != 0, // isReported
            cursor.getInt(offset + 3), // connectType
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // txid
            cursor.getDouble(offset + 5), // neoCount
            cursor.getDouble(offset + 6), // qlcCount
            cursor.getLong(offset + 7), // timestamp
            cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8), // exChangeId
            cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9), // friendNum
            cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10), // assetName
            cursor.getShort(offset + 11) != 0, // isMainNet
            cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12) // toP2pId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, TransactionRecord entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setTransactiomType(cursor.getInt(offset + 1));
        entity.setIsReported(cursor.getShort(offset + 2) != 0);
        entity.setConnectType(cursor.getInt(offset + 3));
        entity.setTxid(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setNeoCount(cursor.getDouble(offset + 5));
        entity.setQlcCount(cursor.getDouble(offset + 6));
        entity.setTimestamp(cursor.getLong(offset + 7));
        entity.setExChangeId(cursor.isNull(offset + 8) ? null : cursor.getString(offset + 8));
        entity.setFriendNum(cursor.isNull(offset + 9) ? null : cursor.getString(offset + 9));
        entity.setAssetName(cursor.isNull(offset + 10) ? null : cursor.getString(offset + 10));
        entity.setIsMainNet(cursor.getShort(offset + 11) != 0);
        entity.setToP2pId(cursor.isNull(offset + 12) ? null : cursor.getString(offset + 12));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(TransactionRecord entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(TransactionRecord entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(TransactionRecord entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
